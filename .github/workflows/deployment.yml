name: Sandbox CICD Pipeline

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: ms-sandbox-service

jobs:

  checkout:
    runs-on: [self-hosted, sendbox]
    outputs:
      commit_sha: ${{ steps.get_sha.outputs.commit_sha }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get short commit SHA
        id: get_sha
        run: echo "::set-output name=commit_sha::$(git rev-parse --short HEAD)"


  build:
    runs-on: [self-hosted, sendbox]
    needs: checkout
    outputs:
      build_artifact: ${{ steps.maven_build.outputs.artifact_path }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Verify Maven is installed
        run: |
          mvn -v || (echo "Maven is not installed!" && exit 1)

      - name: Build Java application with Maven
        id: maven_build
        run: |
          mvn clean package --file pom.xml
          echo "::set-output name=artifact_path::target/ms-sandbox-service.jar" # optional if you want to pass artifact info


  docker-build:
    runs-on: [self-hosted, sendbox]
    needs: build
    env:
      GIT_SHA: ${{ needs.checkout.outputs.commit_sha }}
      IMAGE_NAME: ${{ env.IMAGE_NAME }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.GIT_SHA }} .
          docker tag ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.GIT_SHA }} ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest


  docker-push:
    runs-on: [self-hosted, sendbox]
    needs: docker-build
    env:
      GIT_SHA: ${{ needs.checkout.outputs.commit_sha }}
      IMAGE_NAME: ${{ env.IMAGE_NAME }}
    steps:
      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker images
        run: |
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:${{ env.GIT_SHA }}
          docker push ${{ secrets.DOCKER_USERNAME }}/${{ env.IMAGE_NAME }}:latest
